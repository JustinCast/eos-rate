version: "3.5"

services:
  postgres:
    container_name: eosrate_postgres
    image: postgres:10.4
    volumes:
      - eosrate-postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      DB_NAME: eosrate
      DB_USER: user
      DB_PASSWORD: pass
      POSTGRES_DB: eosrate

  pgweb:
    container_name: eosrate_pgweb
    image: sosedoff/pgweb:latest
    restart: always
    ports:
      - "8082:8081"
    environment:
      DATABASE_URL: postgres://user:pass@postgres:5432/eosrate?sslmode=disable
    depends_on:
      - postgres

  hapi:
    container_name: eosrate_hapi
    build:
      context: ./services/hapi
      dockerfile: Dockerfile
    volumes:
      - ./services/hapi:/opt/application
      - /opt/application/node_modules # prevents host/container conflicts
    ports:
      - "3005:9090"
    environment:
      VIRTUAL_HOST: "${VIRTUAL_HOST}"
      VIRTUAL_PORT: "${VIRTUAL_PORT}"
      DB_USER: "${DB_USER}"
      DB_PASSWORD: "${DB_PASSWORD}"
      DB_PORT: "${DB_PORT}"
      DB_NAME: "${DB_NAME}"
      DB_HOST: postgres
      DB_SCHEMA: public
      EOS_API_ENDPOINT: "${EOS_API_ENDPOINT}"

    depends_on:
      - postgres

  demux:
    container_name: eosrate_demux
    build:
      context: ./services/demux
      dockerfile: ./Dockerfile
    image: eosrate/demux
    volumes:
      - ./services/demux:/opt/application # mount demux service folder
      - /opt/application/node_modules # prevents host/container conflicts
    depends_on:
      - postgres
      - hasura
    environment:
      DB_USER: "${DB_USER}"
      DB_PASSWORD: "${DB_PASSWORD}"
      DB_PORT: "${DB_PORT}"
      DB_NAME: "${DB_NAME}"
      DB_HOST: postgres
      DB_SCHEMA: public
      EOS_API_ENDPOINT: "${EOS_API_ENDPOINT}"
      WAIT_HOSTS: postgres:"${DB_PORT}", hasura:8080
      WAIT_HOSTS_TIMEOUT: 60
    ports:
      - "3030:3030"
    networks:
      default:

  hasura:
    container_name: eosrate_hasura
    build:
      context: ./services/hasura
      dockerfile: ./Dockerfile
    image: hasura/graphql-engine:v1.2.0-beta.4.cli-migrations
    ports:
      - "8088:8080"
    depends_on:
      - postgres
    restart: always
    environment:
      HASURA_GRAPHQL_DATABASE_URL: "${HASURA_GRAPHQL_DATABASE_URL}"
      HASURA_GRAPHQL_MIGRATIONS_DIR: /hasura-migrations
      HASURA_GRAPHQL_ACTION_BASE_URL: http://hapi:9090
      HASURA_GRAPHQL_ADMIN_SECRET: "${HASURA_GRAPHQL_ADMIN_SECRET}"
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: "${HASURA_GRAPHQL_UNAUTHORIZED_ROLE}"

    volumes:
      - ./services/hasura/migrations:/hasura-migrations #  mount hasura migrations folder

  frontend:
    container_name: eosrate_frontend
    build:
      context: ./services/frontend
      dockerfile: ./Dockerfile
      target: server
    image: eosrate/frontend
    depends_on:
      - hasura
      - hapi
    ports:
      - "80:80"
    environment:
      REACT_APP_GRAPHQL_HTTP_URL: "${REACT_APP_GRAPHQL_HTTP_URL}"
      REACT_APP_GRAPHQL_WS_URL: "${REACT_APP_GRAPHQL_WS_URL}"
      REACT_APP_EOS_API_URL: "${REACT_APP_EOS_API_URL}"
      REACT_APP_EOS_API_HOST: "${REACT_APP_EOS_API_HOST}"
      REACT_APP_EOS_API_PORT: "${REACT_APP_EOS_API_PORT}"
      REACT_APP_EOS_API_PROTOCOL: "${REACT_APP_EOS_API_PROTOCOL}"
      REACT_APP_EOS_CHAIN_ID: "${REACT_APP_EOS_CHAIN_ID}"
    networks:
      default:
